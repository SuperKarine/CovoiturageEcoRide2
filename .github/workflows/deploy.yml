name: Build, push, and deploy Docker image to the server

on:
  push:
    branches: ["main"]

env:
  REGISTRY: ghcr.io
  DOCKER_IMAGE_PRODUCTION_TAG: production

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4

      - name: 🧑‍💻 Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: ⬆️ Extract metadata for final image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}-final
          tags: ${{ env.DOCKER_IMAGE_PRODUCTION_TAG }}

      - name: 🐳 Build and push final image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          target: final
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  copy-docker-compose:
    runs-on: ubuntu-latest
    needs: build-and-push-image
    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4

      - name: 🔑 Setup SSH key properly
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          # Écriture de la clé SSH
          echo "${{ secrets.SSH_COVOITURAGEECORIDE2 }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          ssh-keyscan -H ${{ secrets.VPS_IP }} > ~/.ssh/known_hosts 2>/dev/null
          chmod 600 ~/.ssh/known_hosts
          
          # Vérification de la clé 
          echo "=== SSH Key Info ==="
          head -1 ~/.ssh/id_rsa
          echo "=== Known Hosts ==="
          cat ~/.ssh/known_hosts

      - name: 🔄 Check and reboot if required 
        run: |
          if ssh -T -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_IP }} "[ -f /var/run/reboot-required ]"; then
            echo "Reboot required, rebooting the server..."
            ssh -T -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_IP }} "sudo reboot"
            echo "Waiting 2 minutes for reboot..."
            sleep 120
          else
            echo "No reboot required."
          fi

      - name: 📜 Create test script 
        run: |
          ssh -T -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_IP }} << 'EOF'
            echo '#!/bin/sh' > /tmp/test_connection.sh
            echo 'echo Connection OK' >> /tmp/test_connection.sh
            chmod +x /tmp/test_connection.sh
            echo "Test script created successfully"
          EOF

      - name: 📑 Copy docker-compose.yml with SCP
        run: |
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=yes -o UserKnownHostsFile=~/.ssh/known_hosts ./docker-compose.yml ${{ secrets.VPS_USER }}@${{ secrets.VPS_IP }}:~/
          echo "docker-compose.yml copied successfully"

  deploy:
    runs-on: ubuntu-latest
    needs: copy-docker-compose
    steps:
      - name: 🔑 Setup SSH key
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.SSH_COVOITURAGEECORIDE2 }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS_IP }} > ~/.ssh/known_hosts 2>/dev/null

      - name: 🚀 Deploy to server 
        run: |
          ssh -T -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_IP }} << 'EOF'
            echo "Pulling latest Docker image..."
            docker pull ghcr.io/${{ github.repository }}-final:${{ env.DOCKER_IMAGE_PRODUCTION_TAG }}
            echo "Stopping existing containers..."
            docker compose down
            echo "Starting new containers..."
            docker compose up -d
            echo "Cleaning up unused images..."
            docker image prune -f
            echo "Deployment completed successfully!"
          EOF